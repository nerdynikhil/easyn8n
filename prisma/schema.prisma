// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  plan      String   @default("free") // free, pro, business, enterprise
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  workflows  Workflow[]
  usageLogs  UsageLog[]
  accounts   Account[]
  sessions   Session[]

  @@map("users")
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Workflows table
model Workflow {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String
  n8nJson     Json     @map("n8n_json")
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageLogs UsageLog[]

  @@map("workflows")
}

// Templates table
model Template {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  n8nJson     Json     @map("n8n_json")
  isPremium   Boolean  @default(false) @map("is_premium")
  isActive    Boolean  @default(true) @map("is_active")
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  usageLogs UsageLog[]

  @@map("templates")
}

// Usage tracking
model UsageLog {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  action     String   // generate, export, template_use, etc.
  workflowId String?  @map("workflow_id")
  templateId String?  @map("template_id")
  metadata   Json?    // Additional data like generation time, etc.
  timestamp  DateTime @default(now())

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow Workflow? @relation(fields: [workflowId], references: [id], onDelete: SetNull)
  template Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("usage_logs")
}
