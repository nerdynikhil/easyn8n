import { GoogleGenerativeAI } from '@google/generative-ai';
import { N8NWorkflow, WorkflowGenerationRequest } from '@/types';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

export async function generateWorkflowWithGemini(request: WorkflowGenerationRequest): Promise<N8NWorkflow> {
  const { description, complexity = 'medium', category, requirements } = request;

  const systemPrompt = `You are an expert n8n workflow designer and automation specialist. Your task is to generate complete, functional n8n workflow JSON configurations based on user requirements.

CRITICAL INSTRUCTIONS:
- Generate ONLY valid JSON that represents a complete n8n workflow
- Use realistic n8n node types and configurations
- Ensure proper node connections and data flow
- Include error handling where applicable
- Follow n8n best practices for workflow design
- Make workflows production-ready and functional

AVAILABLE N8N NODES (use appropriate ones):
- HTTP Request: For API calls and webhooks
- Code: For custom JavaScript/Python logic  
- If: For conditional branching logic
- Set: For data transformation and manipulation
- Wait: For delays and timing
- Schedule Trigger: For time-based automation
- Webhook: For HTTP endpoint triggers
- Manual Trigger: For manual workflow execution
- Gmail: For email operations
- Slack: For Slack messaging
- Google Sheets: For spreadsheet operations
- Notion: For Notion database operations
- Airtable: For Airtable database operations
- MySQL/PostgreSQL: For database operations
- Merge: For combining data streams
- Split In Batches: For processing large datasets
- Filter: For filtering data
- Sort: For sorting data

WORKFLOW STRUCTURE REQUIREMENTS:
1. Start with appropriate trigger node (Manual, Webhook, Schedule, etc.)
2. Add processing nodes with realistic parameters
3. Include proper error handling nodes where needed
4. End with action/output nodes
5. Ensure all connections are valid
6. Use realistic node positions (spread horizontally)

RESPONSE FORMAT: Return ONLY a valid JSON object with this exact structure:
{
  "id": "workflow_unique_id",
  "name": "Descriptive Workflow Name", 
  "nodes": [...],
  "connections": {...},
  "active": false,
  "settings": {},
  "staticData": {}
}`;

  const userPrompt = `Create a professional n8n workflow for: "${description}"

Requirements:
- Complexity Level: ${complexity}
${category ? `- Category: ${category}` : ''}
${requirements?.length ? `- Additional Requirements: ${requirements.join(', ')}` : ''}

Generate a complete, functional n8n workflow JSON that:
1. Uses appropriate trigger node for the automation
2. Includes realistic processing and transformation nodes
3. Has proper error handling if needed
4. Ends with appropriate action/output nodes
5. Contains realistic node parameters and configurations
6. Follows n8n workflow best practices

Return ONLY the JSON - no explanations or additional text.`;

  try {
    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 4000,
      }
    });

    const result = await model.generateContent([
      { text: systemPrompt },
      { text: userPrompt }
    ]);

    const response = await result.response;
    let workflowJson = response.text();

    // Clean up the response to extract JSON
    workflowJson = workflowJson.replace(/```json\s*/, '').replace(/```\s*$/, '').trim();
    
    if (!workflowJson) {
      throw new Error('No workflow generated by Gemini');
    }

    const workflow = JSON.parse(workflowJson) as N8NWorkflow;
    
    // Validate basic structure
    if (!workflow.nodes || !workflow.connections) {
      throw new Error('Invalid workflow structure from Gemini');
    }

    // Ensure required properties
    workflow.id = workflow.id || generateWorkflowId();
    workflow.name = workflow.name || generateWorkflowName(description);
    workflow.active = workflow.active ?? false;
    workflow.settings = workflow.settings || {};
    workflow.staticData = workflow.staticData || {};

    return workflow;
  } catch (error) {
    console.error('Gemini workflow generation error:', error);
    
    if (error instanceof Error && error.message.includes('JSON')) {
      throw new Error('Failed to parse workflow JSON from Gemini. Please try again with a simpler description.');
    }
    
    throw new Error('Failed to generate workflow with Gemini AI');
  }
}

function generateWorkflowId(): string {
  return `workflow_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

function generateWorkflowName(description: string): string {
  // Extract a meaningful name from description
  const words = description.split(' ').slice(0, 4);
  return words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
}

export async function validateWorkflow(workflow: N8NWorkflow): Promise<boolean> {
  try {
    // Basic validation checks
    if (!workflow.nodes || !Array.isArray(workflow.nodes)) return false;
    if (!workflow.connections || typeof workflow.connections !== 'object') return false;
    if (workflow.nodes.length === 0) return false;

    // Check for required node properties
    for (const node of workflow.nodes) {
      if (!node.id || !node.name || !node.type) return false;
      if (!node.position || !Array.isArray(node.position)) return false;
      if (!node.parameters || typeof node.parameters !== 'object') return false;
    }

    // Validate connections structure
    for (const [nodeId, connections] of Object.entries(workflow.connections)) {
      if (!workflow.nodes.find(n => n.id === nodeId)) return false;
      if (connections.main) {
        for (const connectionGroup of connections.main) {
          for (const connection of connectionGroup) {
            if (!connection.node || !workflow.nodes.find(n => n.id === connection.node)) {
              return false;
            }
          }
        }
      }
    }

    return true;
  } catch (error) {
    console.error('Workflow validation error:', error);
    return false;
  }
} 